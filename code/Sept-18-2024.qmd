---
title: "Sept-18-2024"
format: html
editor: visual
---

```{r}
rm(list=ls()) #clears R's environment
library(tidyverse)
library(here)
```

```{r}
pets <- read.csv(here("Data", "pets.csv"))
glimpse(pets)
str(pets)
```

data types: how data inside an object are organized #characters, integers, factors

## Vectors

The simplest data structre in R Atomic vector -\> one type of data

```{r}
x <- 3 #single number can be a vector
y <- "gus"
food <- c("chip", "potato", "gum")
nums <- c(1.6,2.3,4,17)
ints <- c(1,3,5) #componets are elements in a vector
```

Function to use when interested in learning ore about the data structure of an object is the class() function

```{r}
class(food)
```

Can a vector have more than one data type?

```{r}
my_vector <- c("oatmeal", 12, x)
my_vector #all returned as character data
```

## Matrices (Matrix)

```{r}
my_matrix <- matrix(1:9, nrow=3, ncol=3)
```

Matrix gets listed under data (2-dimensional)

Can matrices have character data

```{r}
a <- c("hank", "finn", "puffin", "frizzle")
pets_matrix <- matrix(a, nrow=2)
class(pets_matrix)
```

another way to make a matrix: use cbind() or rbind()

```{r}
#create two small vectors

vector_a <- c(1:4)
vector_b <- c(9:12)
vector_c <- c("a", "b", "c", "d")
```

```{r}
my_nums <- cbind(vector_a, vector_b) # all integers
my_nums1 <- rbind(vector_a, vector_b) # all integers
my_nums2 <- cbind(vector_b, vector_c) # turns everything into character data
class(my_nums2)
```

Before getting into data frames, need to learn about accessing elements of a vector or matrix; Use INDEXING to do so

```{r}
vect <- c(1, 87, 18, 5)
vect[3]*vect[4] # use square brackets to find the elements in each position
```

```{r}
my_nums1[2,3]
```

## Exercise 1

```{r}
matrix_1 <- matrix(1:20, ncol = 4)
matrix_1[4,3]
matrix_1[5,2]
num_8 <- matrix_1[3,2]
```

matrices can have column names

```{r}
colnames(my_matrix) <- c(1, 2, 3)
```

## Data Frames

2-dimensional, can have more than one type of data

```{r}
pets1 <- c("sam", "willie", "finn")
pet_count <- c(3,18,27)
pet_df <- as.data.frame(cbind(pets1, pet_count))

pet_mat <- cbind(pets1, pet_count)

#created a data frame but R pushed all to character
pet_df$pet_count <- as.numeric(pet_df$pet_count)
```

Accessing elements of a data frame
```{r}
#indexing
pet_df[1,2]
pet_df$pets1[3]
```

